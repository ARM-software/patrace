import os.path
import sys

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

import specs.glesparams as glparams

if __name__ == '__main__':
    sys.stdout = open('paramsize.cpp', 'w')
    # Generate a helper function to know how many elements a parameter has
    print '// Generated by', sys.argv[0]
    print r"""
#include "helper/eglsize.hpp"
#include "specs/khronos_enums.hpp"

size_t _gl_param_size(GLenum pname)
{
    switch (pname)
    {
"""
    for function, type, count, name in glparams.parameters:
        if type is not None:
            print '    case PA_%s: return %s;' % (name, str(count))
    print r"""
    case GL_PROGRAM_BINARY_FORMATS:
        {
            GLint num_binary_formats = 0;
            _glGetIntegerv(GL_NUM_PROGRAM_BINARY_FORMATS, &num_binary_formats);
            return num_binary_formats;
        }
    case GL_COMPRESSED_TEXTURE_FORMATS:
        {
            GLint num_compressed_texture_formats = 0;
            _glGetIntegerv(GL_NUM_COMPRESSED_TEXTURE_FORMATS, &num_compressed_texture_formats);
            return num_compressed_texture_formats;
        }
    default:
        {
            DBG_LOG("warning: unknown GLenum 0x%04X\n", pname);
            return 1;
        }
    }
}

size_t paramSizeGlGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname)
{
    switch (pname)
    {
    case GL_UNIFORM_BLOCK_BINDING:
    case GL_UNIFORM_BLOCK_DATA_SIZE:
    case GL_UNIFORM_BLOCK_NAME_LENGTH:
    case GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS:
    case GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:
    case GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:
        return 1;
    case GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:
        {
            GLint i = 0;
            _glGetActiveUniformBlockiv(program, uniformBlockIndex, GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, &i);
            return i;
        }
    default:
        {
            DBG_LOG("Unknown GLenum for uniform block: 0x%04X\n", pname);
            return 1;
        }
    }
}
"""
