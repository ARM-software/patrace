==================================================================================
Information about tracing content on the Android platform.
==================================================================================

Table of Contents:
    1. Brief introduction
    2. Build the interceptor
    3. Deploy the interceptor to your hardware
    4. Trace an application




1. Brief introduction

In order to trace content on the Android system, we are going to insert our interceptor between the 'Android EGL/GLES wrappers' and the 'real mali drivers'. The layers look like:

    ---------------------------
       Android application
    ---------------------------
     Android EGL/GLES wrappers
    ---------------------------
    |EGL/GLES Driver interface|
===>|---<Our Interceptor>-----|
    |        egltrace         |
    ---------------------------
         Real Mali Drivers
    ---------------------------

1.1 Layer: Android EGL/GLES wrappers

This layer includes the following files in the Android OS:
    /system/lib/libEGL.so
    /system/lib/libGLESv1_CM.so
    /system/lib/libGLESv2.so
These three .so files are just a wrapper of EGL & GLES, which are provided by Google. There are some special APIs in these .so files and we donot want to touch them. That's the reason why we decided to insert our interceptor underneath this layer.

There is a special configuration file, so that the wrapper will know where to forward the function calls. Normally, these function calls are forward to the real driver.
    /system/lib/egl/egl.cfg
We can modify this configuration file to forward them to the interceptor.

1.2 Layer: Real Mali Drivers
This layer includes the following files in the Android OS:
    /system/lib/egl/libEGL_mali.so
    /system/lib/egl/libGLESv1_CM_mali.so
    /system/lib/egl/libGLESv2_mali.so

1.3 Layer: Interceptor
Our interceptor contains two sub-layers:
    1.3.1 driver interface layer (libEGL_wrapper.so, libGLESv1_CM_wrapper.so, libGLESv2_wrapper.so)
        It provides exactly the same API as the real driver. There are two reasons why we introduce this driver interface layer:
        #1. We cannot use LD_PRELOAD on Android platform.
        #2. This is an unified driver interface. It can also be configured to forward function calls to the EaGL module, which could modify the behavior of these function calls on the fly.
    1.3.2 egltrace (libegltrace.so)
        It will serialize the function calls to a binary trace file.




2. Build the interceptor

You can skip this step by using the pre-built binaries in 
    <APITrace root>/drv_interface/build/android/libs/armeabi-v7a/
    <APITrace root>/_releases/android/egltrace/

2.1 Install Android NDK successfully. (The version I use is 'android-ndk-r7c')

2.2 Build drirver interface
    $ cd <APITrace root>/drv_interface/build/android
    $ NDK=<ndk root dir> make
    The output files are in:
    <APITrace root>/drv_interface/build/android/libs/armeabi-v7a/

2.4 Build libegltrace.so. Please execute the following shell commands:
    $ cd <APITrace root>/_projects/android/egltrace
    $ make
    The output file is in:
    <APITrace root>/_projects/android/egltrace/libs/armeabi-v7a/




3. Deploy the interceptor to your hardware

3.1 Make sure 'adb' (Android Debug Bridge) work correctly on your device (eg. Odroid-A)
    You can type the following command in your host shell:
    $ adb devices
    If the adb works fine, the output would be something like this:
        List of devices attached 
        BABABEEFBABABEEF	device

3.2 You can use the following python script to deploy the interceptor
    $ cd <APITrace root>/drv_interface/build/android
    $ python updateDrvInterface.py
    $ cd <APITrace root>/android/egltrace
    $ python updateTracer.py

    The updateTracer.py script will copy intercetor.cfg to "/system/lib/egl/interceptor.cfg". This file read by the fakedriver/wrappers to know what intercetor to use.

3.3 After reboot, the interceptor will be enabled.

4. Trace an application

4.1 Create a directory for the output trace files. (In our current release, the path of this output dir is hard-coded)
    // executed on your host machine
    $ adb shell
    // executed on the Android shell
    # mkdir /data/apitrace
    
4.2 Create "/system/lib/egl/appList.cfg", which is used to specify the names of the applications that we want to trace.
    // executed on your host machine
    $ adb shell
    // executed on the Android shell
    # echo 'com.glbenchmark.glbenchmark20' > /system/lib/egl/appList.cfg
   
   Note:
   1) You can get the 'name' of the application by executing command 'ps' in 'adb shell' while the application is running on the Android system. To be exactly, it's the name of the process.
   2) 'appList.cfg' can have multiple lines, and each line corresponds to one application you want to trace.
   3) It's more convenient for you to edit appList.cfg on your host machine, then use 'adb push' to transfer it to the Android device.

4.3 Now, everything is ready, and we can try the first trace.
    1) Install the application (eg. GLBenchmark_2.1.1_C97249_Android_Corporate.apk) to be traced. You can use adb shell to install it (the command looks like 'adb install xxx.apk').
    2) Run the application, either by the user interface or by adb shell. 
    3) Select one test case, and run it.
    4) While the application is running, you can use adb logcat to inspect the log.
    5) After the selected case finish, you'll get an output trace file which name is 'com.glbenchmark.glbenchmark20.trace' in '/data/apitrace' folder. If you run the same case again without remove this file, you'll get another output file 'com.glbenchmark.glbenchmark20.1.trace'.
    6) At last, you may want to use 'adb pull' to transfer the trace file to your host machine. Then, you can use 'eglretrace' to replay it. You can also use 'qapitrace' to open it and inspect each function call in it.
